#include <stdio.h>
#include <string.h>

#define MAX_MEMBERS 10
#define MAX_NAME_LEN 50
#define MAX_FOODS 7
#define MAX_TOTAL_CAL 1500

const int validCalories[] = {100, 150, 200, 250, 300};
const int validCalorieCount = 5;

typedef struct {
    char name[MAX_NAME_LEN];
    int age;
    float height; // in cm
    float weight; // in kg
    char physicalCondition[100];
    char workoutRoutine[200];
    char dietPlan[300];
} Member;

typedef struct {
    char food[100];
    int calorie;
} FoodRecord;

// Stack for food records
FoodRecord foodStack[MAX_FOODS];
int top = -1;

Member members[MAX_MEMBERS];
int memberCount = 0;

int isValidCalorie(int calorie) {
    for (int i = 0; i < validCalorieCount; i++) {
        if (validCalories[i] == calorie) return 1;
    }
    return 0;
}

int pushFood(const char* food, int calorie) {
    if (top >= MAX_FOODS - 1) {
        printf("Cannot add more food. Daily limit of 7 items reached.\n");
        return 0;
    }
    if (!isValidCalorie(calorie)) {
        printf("Invalid calorie input. Please choose from 100, 150, 200, 250, 300.\n");
        return 0;
    }
    int totalCal = 0;
    for (int i = 0; i <= top; i++) {
        totalCal += foodStack[i].calorie;
    }
    if (totalCal + calorie > MAX_TOTAL_CAL) {
        printf("Cannot add food. Total calories would exceed 1500.\n");
        return 0;
    }
    ++top;
    strcpy(foodStack[top].food, food);
    foodStack[top].calorie = calorie;
    return 1;
}

int calculateTotalCalories() {
    int total = 0;
    for (int i = 0; i <= top; i++) {
        total += foodStack[i].calorie;
    }
    return total;
}

void setMyDailyFood() {
    char food[100];
    int calorie;
    char choice;

    do {
        printf("Enter food name: ");
        scanf(" %[^
]", food);
        printf("Enter calorie (100, 150, 200, 250, 300): ");
        scanf(" %d", &calorie);

        if (pushFood(food, calorie)) {
            printf("Food added successfully.\n");
        }

        if (top >= MAX_FOODS - 1 || calculateTotalCalories() >= MAX_TOTAL_CAL) {
            break;
        }

        printf("Do you want to add more food? (Y/N): ");
        scanf(" %c", &choice);
    } while (choice == 'Y' || choice == 'y');

    printf("Total calories consumed today: %d\n", calculateTotalCalories());
}

void enterPhysicalCondition() {
    char name[MAX_NAME_LEN];
    printf("Enter member name: ");
    scanf(" %[^
]", name);

    for (int i = 0; i < memberCount; i++) {
        if (strcmp(members[i].name, name) == 0) {
            printf("Enter physical condition notes: ");
            scanf(" %[^
]", members[i].physicalCondition);
            printf("Updated successfully.\n");
            return;
        }
    }
    printf("Member not found.\n");
}

void viewPhysicalCondition() {
    for (int i = 0; i < memberCount; i++) {
        printf("%s: %s\n", members[i].name, members[i].physicalCondition);
    }
}

void setWorkoutRoutine() {
    char name[MAX_NAME_LEN];
    printf("Enter member name: ");
    scanf(" %[^
]", name);

    for (int i = 0; i < memberCount; i++) {
        if (strcmp(members[i].name, name) == 0) {
            printf("Enter workout routine: ");
            scanf(" %[^
]", members[i].workoutRoutine);
            printf("Workout routine updated.\n");
            return;
        }
    }
    printf("Member not found.\n");
}

void viewWorkoutRoutine() {
    for (int i = 0; i < memberCount; i++) {
        printf("%s: %s\n", members[i].name, members[i].workoutRoutine);
    }
}

void setDietPlan() {
    char name[MAX_NAME_LEN];
    printf("Enter member name: ");
    scanf(" %[^
]", name);

    for (int i = 0; i < memberCount; i++) {
        if (strcmp(members[i].name, name) == 0) {
            printf("Enter diet plan: ");
            scanf(" %[^
]", members[i].dietPlan);
            printf("Diet plan updated.\n");
            return;
        }
    }
    printf("Member not found.\n");
}

void viewDietPlan() {
    for (int i = 0; i < memberCount; i++) {
        printf("%s: %s\n", members[i].name, members[i].dietPlan);
    }
}

void showHealthManagementMenu() {
    char choice;
    do {
        printf("\n[III. Health Management]\n");
        printf("A. Enter Physical Condition\n");
        printf("B. View Physical Condition\n");
        printf("C. Set Workout Routine\n");
        printf("D. View Workout Routine\n");
        printf("E. Set Diet Plan\n");
        printf("F. View Diet Plan\n");
        printf("G. Record Daily Diet\n");
        printf("Q. Back to Main Menu\n");
        printf("Select an option: ");
        scanf(" %c", &choice);

        switch (choice) {
            case 'A': case 'a': enterPhysicalCondition(); break;
            case 'B': case 'b': viewPhysicalCondition(); break;
            case 'C': case 'c': setWorkoutRoutine(); break;
            case 'D': case 'd': viewWorkoutRoutine(); break;
            case 'E': case 'e': setDietPlan(); break;
            case 'F': case 'f': viewDietPlan(); break;
            case 'G': case 'g': setMyDailyFood(); break;
            case 'Q': case 'q': break;
            default: printf("Invalid option. Try again.\n");
        }
    } while (choice != 'Q' && choice != 'q');
}

int main() {
    char choice;

    // Sample data
    strcpy(members[0].name, "Alice");
    members[0].age = 24;
    members[0].height = 165.5;
    members[0].weight = 52.0;
    memberCount = 1;

    do {
        printf("\n[Main Menu]\n");
        printf("1. Placeholder Option 1\n");
        printf("2. Placeholder Option 2\n");
        printf("3. Health Management\n");
        printf("Q. Quit\n");
        printf("Select an option: ");
        scanf(" %c", &choice);

        switch (choice) {
            case '1': printf("Option 1 selected.\n"); break;
            case '2': printf("Option 2 selected.\n"); break;
            case '3': showHealthManagementMenu(); break;
            case 'Q': case 'q': printf("Exiting...\n"); break;
            default: printf("Invalid option. Try again.\n");
        }
    } while (choice != 'Q' && choice != 'q');

    return 0;
}
