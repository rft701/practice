#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_SONGS 7
#define MAX_TITLE_LEN 50
#define MAX_NICK_LEN 20
#define MAX_NAME_LEN 20
#define MAX_LYRICS_LEN 100
#define MAX_MEMBERS 7

typedef struct {
    char title[MAX_TITLE_LEN];
    char consonants[MAX_TITLE_LEN];
    char lyricsSnippet[MAX_LYRICS_LEN];
} KpopSong;

const char *memberNames[MAX_MEMBERS] = {
    "김영진", "이지훈", "박찬호", "최수민", "이민재", "강현우", "송재현"
};

const char *memberNicknames[MAX_MEMBERS] = {
    "YoungJin", "JiHoon", "ChanHo", "SooMin", "MinJae", "HyunWoo", "JaeHyun"
};

KpopSong songs[MAX_SONGS];
int songCount = 0;

void extractConsonant(const char *input, char *output) {
    int i, j = 0;
    for(i = 0; input[i] != '\0'; i++) {
        unsigned char ch = (unsigned char)input[i];
        if(ch >= 0xAC && ch <= 0xD7) {
            output[j++] = input[i];
        } else if ((input[i] >= 'A' && input[i] <= 'Z') || (input[i] >= 'a' && input[i] <= 'z')) {
            output[j++] = input[i];
        }
    }
    output[j] = '\0';
}

void inputKpopSongInitials() {
    int i;
    for(i = 0; i < MAX_SONGS; i++) {
        printf("%d번째 노래 제목 입력: ", i+1);
        fgets(songs[i].title, MAX_TITLE_LEN, stdin);
        songs[i].title[strcspn(songs[i].title, "\n")] = '\0';
        extractConsonant(songs[i].title, songs[i].consonants);
        printf("%d번째 노래 가사 일부 입력(보너스, 엔터 치면 빈칸): ", i+1);
        fgets(songs[i].lyricsSnippet, MAX_LYRICS_LEN, stdin);
        songs[i].lyricsSnippet[strcspn(songs[i].lyricsSnippet, "\n")] = '\0';
        songCount++;
    }
}

int checkKpopSongTitle(const char *inputTitle, const char *targetTitle, const char *targetConsonants) {
    char inputConsonants[MAX_TITLE_LEN];
    extractConsonant(inputTitle, inputConsonants);
    if(strcmp(inputConsonants, targetConsonants) == 0 && strcmp(inputTitle, targetTitle) == 0) {
        return 1;
    }
    return 0;
}

int getBlackKnight(int currentMember) {
    int newMember;
    do {
        newMember = rand() % MAX_MEMBERS;
    } while(newMember == currentMember);
    return newMember;
}

int inputSongTitle(int memberIdx, int songIdx) {
    char inputTitle[MAX_TITLE_LEN];
    int attempts = 0;
    while(attempts < 2) {
        printf("%s(%s)님, 초성 문제: %s\n", memberNames[memberIdx], memberNicknames[memberIdx], songs[songIdx].consonants);
        if(songs[songIdx].lyricsSnippet[0] != '\0') {
            printf("가사의 일부 힌트: %s\n", songs[songIdx].lyricsSnippet);
        }
        printf("노래 제목 입력: ");
        fgets(inputTitle, MAX_TITLE_LEN, stdin);
        inputTitle[strcspn(inputTitle, "\n")] = '\0';
        if(checkKpopSongTitle(inputTitle, songs[songIdx].title, songs[songIdx].consonants)) {
            printf("%s님, 미션을 성공적으로 완료했습니다!\n", memberNames[memberIdx]);
            return 1;
        }
        attempts++;
        printf("틀렸습니다. %d번째 시도입니다.\n", attempts);
    }
    return 0;
}

void completeMission() {
    int currentMember = 0;
    int currentSong = 0;
    int totalSuccess = 0;
    inputKpopSongInitials();
    srand((unsigned)time(NULL));
    while(currentSong < songCount) {
        int success = inputSongTitle(currentMember, currentSong);
        if(success) {
            totalSuccess++;
            currentSong++;
            currentMember = (currentMember + 1) % MAX_MEMBERS;
        } else {
            int blackKnight = getBlackKnight(currentMember);
            printf("대신 %s(%s)님이 도전합니다!\n", memberNames[blackKnight], memberNicknames[blackKnight]);
            success = inputSongTitle(blackKnight, currentSong);
            if(success) {
                totalSuccess++;
                currentSong++;
                currentMember = (blackKnight + 1) % MAX_MEMBERS;
            } else {
                printf("밀리웨이즈는 팀워크를 더 발전시켜서 다시 도전하세요!\n");
                return;
            }
        }
    }
    if(totalSuccess == songCount) {
        printf("밀리웨이즈의 팀워크는 훌륭합니다!\n");
    }
}
