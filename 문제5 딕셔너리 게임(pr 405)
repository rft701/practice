#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_MEMBERS 10
#define MAX_WORDS 30
#define MAX_DESC_LEN 100
#define MAX_NAME_LEN 20

typedef struct {
    char word[20];
    char description[MAX_DESC_LEN];
    int level; // 1: high, 2: medium, 3: low
} WordCard;

typedef struct {
    char name[MAX_NAME_LEN];
    int passedLevel; // 0: not attempted, 1-3: levels, 4: Pass
    int score;
    char passDate[9]; // "YYYYMMDD"
} MyChallenge;

WordCard wordCards[MAX_WORDS];
MyChallenge myChallenges[MAX_MEMBERS];
char* memberNames[MAX_MEMBERS] = {
    "Zaphod", "Trillian", "Ford", "Arthur", "Marvin",
    "Slartibartfast", "Lunkwill", "Fook", "DeepThought", "Wowbagger"
};
int usedMemberFlags[MAX_MEMBERS] = {0};

void getTodayDate(char* buffer) {
    time_t t = time(NULL);
    struct tm tm = *localtime(&t);
    sprintf(buffer, "%04d%02d%02d", tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday);
}

void initWordCards() {
    for (int i = 0; i < 10; i++) {
        sprintf(wordCards[i].word, "High%d", i+1);
        sprintf(wordCards[i].description, "High level description %d", i+1);
        wordCards[i].level = 1;
    }
    for (int i = 10; i < 20; i++) {
        sprintf(wordCards[i].word, "Medium%d", i-9);
        sprintf(wordCards[i].description, "Medium level description %d", i-9);
        wordCards[i].level = 2;
    }
    for (int i = 20; i < 30; i++) {
        sprintf(wordCards[i].word, "Low%d", i-19);
        sprintf(wordCards[i].description, "Low level description %d", i-19);
        wordCards[i].level = 3;
    }
}

int isAllPassed() {
    for (int i = 0; i < MAX_MEMBERS; i++) {
        if (myChallenges[i].passedLevel != 4) return 0;
    }
    return 1;
}

int selectMember() {
    int available = 0;
    for (int i = 0; i < MAX_MEMBERS; i++) {
        if (!usedMemberFlags[i]) available++;
    }
    if (available == 0) return -1;

    int index;
    do {
        index = rand() % MAX_MEMBERS;
    } while (usedMemberFlags[index]);

    usedMemberFlags[index] = 1;
    printf("선택된 게이머: %s\n", memberNames[index]);
    return index;
}

void printPassMessage() {
    printf("축하합니다! 밀리웨이즈 그룹은 딕셔너리 게임에 최종 합격했습니다.\n");
}

void shuffleArray(int* arr, int n) {
    for (int i = n - 1; i > 0; i--) {
        int j = rand() % (i + 1);
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}

void selectRandomWords(int level, int count, WordCard* output[]) {
    int indices[10], k = 0;
    for (int i = 0; i < MAX_WORDS; i++) {
        if (wordCards[i].level == level) {
            indices[k++] = i;
        }
    }
    shuffleArray(indices, 10);
    for (int i = 0; i < count; i++) {
        output[i] = &wordCards[indices[i]];
    }
}

void challengeHighLevel(int memberIndex) {
    WordCard* selected[5];
    selectRandomWords(1, 5, selected);
    int correct = 0;
    char answer[20];

    for (int i = 0; i < 5; i++) {
        printf("Q%d: %s\n답: ", i+1, selected[i]->description);
        scanf("%s", answer);
        if (strcmp(answer, selected[i]->word) == 0) correct++;
    }

    if (correct == 5) {
        myChallenges[memberIndex].passedLevel = 4;
        getTodayDate(myChallenges[memberIndex].passDate);
        printPassMessage();
    } else {
        printf("실패했습니다. 모든 멤버가 다시 도전해야 합니다.\n");
        memset(usedMemberFlags, 0, sizeof(usedMemberFlags));
    }
}

void challengeStepByStep(int memberIndex) {
    int currentLevel = myChallenges[memberIndex].passedLevel + 1;
    WordCard* selected[3];
    selectRandomWords(currentLevel, 3, selected);

    int correct = 0;
    char answer[20];

    for (int i = 0; i < 3; i++) {
        printf("Q%d: %s\n답: ", i+1, selected[i]->description);
        scanf("%s", answer);
        if (strcmp(answer, selected[i]->word) == 0) correct++;
    }

    if (correct >= 2) {
        myChallenges[memberIndex].passedLevel = currentLevel;
        if (currentLevel == 3) {
            myChallenges[memberIndex].passedLevel = 4;
            getTodayDate(myChallenges[memberIndex].passDate);
            printPassMessage();
        }
    } else {
        printf("실패했습니다. 모든 멤버가 다시 도전해야 합니다.\n");
        memset(usedMemberFlags, 0, sizeof(usedMemberFlags));
    }
}

void doDictionaryGame() {
    if (isAllPassed()) {
        printf("이 과정은 이미 통과했습니다. 다른 메뉴를 선택하세요.\n");
        return;
    }

    int memberIndex = selectMember();
    if (memberIndex == -1) return;

    printf("1. 최고 난이도 시험 도전\n2. 난이도 단계 별로 도전\n선택: ");
    int choice;
    scanf("%d", &choice);

    if (choice == 1) {
        challengeHighLevel(memberIndex);
    } else if (choice == 2) {
        challengeStepByStep(memberIndex);
    } else {
        printf("잘못된 입력입니다.\n");
    }
}

int main() {
    srand(time(NULL));
    initWordCards();
    memset(myChallenges, 0, sizeof(myChallenges));

    // For test
    doDictionaryGame();
    return 0;
}
