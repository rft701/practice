#include <stdio.h>
#include <math.h>

enum Category {
  PHYSICAL_STRENGTH = 0,
  KNOWLEDGE,
  SELF_MANAGEMENT,
  TEAMWORK,
  KOREAN_LANGUAGE,
  VOCAL,
  DANCE,
  VISUAL,
  ACTING,
  CATEGORY_COUNT
};

#define MAX_MEMBERS 10
#define MIN_SCORE 5
#define AUTO_DEBUT_MIN 95
#define AUTO_DEBUT_MAX 100

void printCategoryName(enum Category cat);

int main(void)
{
  int members = 0;
  int scores[MAX_MEMBERS][CATEGORY_COUNT];
  int i, j;
  int totalScore = 0;
  int sumCategoryScores[CATEGORY_COUNT] = {0};

  printf("Enter the number of Milliways members (max %d): ", MAX_MEMBERS);
  scanf("%d", &members);
  if (members <= 0 || members > MAX_MEMBERS) {
    printf("Invalid number of members.\n");
    return 1;
  }

  for (i = 0; i < members; i++) {
    printf("Enter scores for member %d (scale 0-10) in 9 categories:\n", i+1);
    for (j = 0; j < CATEGORY_COUNT; j++) {
      int score = -1;
      do {
        printCategoryName((enum Category)j);
        printf(": ");
        scanf("%d", &score);
        if (score < 0 || score > 10) {
          printf("Invalid score. Must be between 0 and 10.\n");
        }
      } while (score < 0 || score > 10);
      scores[i][j] = score;

      if (score < MIN_SCORE) {
        printf("Minimum required score is %d.\n", MIN_SCORE);
        printf("The entire team must retake the %s category.\n", (char[]){
          "Physical Strength", "Knowledge", "Self-Management", "Teamwork",
          "Korean Language", "Vocal", "Dance", "Visual", "Acting"}[j]);
        return 0;
      }
      sumCategoryScores[j] += score;
    }
  }

  for (j = 0; j < CATEGORY_COUNT; j++) {
    sumCategoryScores[j] = (int)floor((double)sumCategoryScores[j] / members);
  }

  {
    int totalPoints = 0;
    for (j = 0; j < CATEGORY_COUNT; j++) {
      totalPoints += sumCategoryScores[j];
    }
    totalScore = (totalPoints * 100) / (10 * CATEGORY_COUNT);
    if (totalScore < 1)
      totalScore = 1;
  }

  printf("Total Score: %d\n", totalScore);

  if (totalScore >= AUTO_DEBUT_MIN && totalScore <= AUTO_DEBUT_MAX) {
    printf("Congratulations! Your stage debut is confirmed!\n");
  } else if (totalScore >= 90 && totalScore < AUTO_DEBUT_MIN) {
    printf("The Debut Certification Team will hold a final evaluation meeting to make a decision.\n");
  } else if (totalScore >= 80 && totalScore < 90) {
    int tempScores[CATEGORY_COUNT];
    int lowestIndices[3] = { -1, -1, -1 };
    int k, minIndex;
    for (k = 0; k < CATEGORY_COUNT; k++) {
      tempScores[k] = sumCategoryScores[k];
    }
    for (k = 0; k < 3; k++) {
      int minScore = 11;
      minIndex = -1;
      for (j = 0; j < CATEGORY_COUNT; j++) {
        if (tempScores[j] < minScore) {
          minScore = tempScores[j];
          minIndex = j;
        }
      }
      lowestIndices[k] = minIndex;
      tempScores[minIndex] = 11;
    }

    printf("Retake the three lowest-scoring categories (");
    for (k = 0; k < 3; k++) {
      printCategoryName((enum Category)lowestIndices[k]);
      if (k != 2)
        printf(", ");
    }
    printf(") after 30 days.\n");
  } else {
    printf("The team must retake the entire certification training.\n");
  }

  return 0;
}

void printCategoryName(enum Category cat)
{
  switch (cat) {
    case PHYSICAL_STRENGTH:
      printf("Physical Strength");
      break;
    case KNOWLEDGE:
      printf("Knowledge");
      break;
    case SELF_MANAGEMENT:
      printf("Self-Management");
      break;
    case TEAMWORK:
      printf("Teamwork");
      break;
    case KOREAN_LANGUAGE:
      printf("Korean Language");
      break;
    case VOCAL:
      printf("Vocal");
      break;
    case DANCE:
      printf("Dance");
      break;
    case VISUAL:
      printf("Visual");
      break;
    case ACTING:
      printf("Acting");
      break;
    default:
      printf("Unknown Category");
      break;
  }
}
