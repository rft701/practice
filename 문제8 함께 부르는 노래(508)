#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LYRICS 100
#define MAX_LINE_LENGTH 256
#define MAX_PARTS 7
#define MAX_MEMBERS 10
#define MAX_NAME_LENGTH 50

typedef struct {
    char *title;
    char *lyrics[MAX_LYRICS];
    int line_count;
} Song;

typedef enum {
    INTRO, VERSE1, PRECHORUS, CHORUS, VERSE2, BRIDGE, FINALCHORUS
} SongPartType;

typedef struct {
    SongPartType part_type;
    int indices[MAX_LYRICS];
    int count;
    char assigned_member[MAX_NAME_LENGTH];
} SongPart;

typedef struct {
    Song song;
    SongPart parts[MAX_PARTS];
} AnalyzedSong;

void printLyrics(Song *song) {
    printf("=== Lyrics ===\n");
    for (int i = 0; i < song->line_count; ++i) {
        printf("[%d] %s\n", i, song->lyrics[i]);
    }
}

void analyzeSong(Song *song, AnalyzedSong *analysis) {
    analysis->song = *song;
    for (int i = 0; i < MAX_PARTS; i++) {
        analysis->parts[i].part_type = i;
        analysis->parts[i].count = 0;
        printf("Enter line indices for part %d (end with -1):\n", i);
        int index;
        while (1) {
            scanf("%d", &index);
            if (index == -1) break;
            if (index >= 0 && index < song->line_count) {
                analysis->parts[i].indices[analysis->parts[i].count++] = index;
            }
        }
    }
}

void assignSongPart(AnalyzedSong *analysis) {
    char group_name[MAX_NAME_LENGTH];
    int member_count;

    printf("Enter group name: ");
    scanf("%s", group_name);
    printf("Enter number of members: ");
    scanf("%d", &member_count);

    for (int i = 0; i < member_count; i++) {
        char member_name[MAX_NAME_LENGTH];
        printf("Enter name for member %d: ", i + 1);
        scanf("%s", member_name);

        printf("Select part index (0:Intro ~ 6:Final Chorus) for %s: ", member_name);
        int part_index;
        scanf("%d", &part_index);

        if (part_index >= 0 && part_index < MAX_PARTS) {
            strncpy(analysis->parts[part_index].assigned_member, member_name, MAX_NAME_LENGTH);
        }
    }
}

void printAnalyzedSong(AnalyzedSong *analysis) {
    printf("=== Analyzed Song Structure ===\n");
    for (int i = 0; i < MAX_PARTS; i++) {
        printf("Part %d assigned to %s:\n", i, analysis->parts[i].assigned_member[0] ? analysis->parts[i].assigned_member : "None");
        for (int j = 0; j < analysis->parts[i].count; j++) {
            int idx = analysis->parts[i].indices[j];
            printf("  [%d] %s\n", idx, analysis->song.lyrics[idx]);
        }
    }
}

void printPartLyrics(AnalyzedSong *analysis, const char *member_name) {
    printf("Lyrics for %s:\n", member_name);
    for (int i = 0; i < MAX_PARTS; ++i) {
        if (strcmp(analysis->parts[i].assigned_member, member_name) == 0) {
            for (int j = 0; j < analysis->parts[i].count; j++) {
                int idx = analysis->parts[i].indices[j];
                printf("  [%d] %s\n", idx, analysis->song.lyrics[idx]);
            }
        }
    }
}

void printLyricLine(char *line) {
    printf("%s\n", line);
}

void applyToLyrics(Song *song, void (*func)(char *)) {
    for (int i = 0; i < song->line_count; ++i) {
        func(song->lyrics[i]);
    }
}

void understandSongs(Song *song) {
    AnalyzedSong analyzed;
    analyzeSong(song, &analyzed);
    assignSongPart(&analyzed);
    printAnalyzedSong(&analyzed);
}

void loadLyricsFromFile(Song *song, const char *filename) {
    FILE *file = fopen(filename, "r");
    if (!file) {
        perror("File open error");
        return;
    }

    song->line_count = 0;
    song->title = "Spring Day";
    char buffer[MAX_LINE_LENGTH];
    while (fgets(buffer, MAX_LINE_LENGTH, file) && song->line_count < MAX_LYRICS) {
        song->lyrics[song->line_count] = strdup(buffer);
        song->line_count++;
    }
    fclose(file);
}

int main() {
    Song song;
    loadLyricsFromFile(&song, "spring_day.txt");
    understandSongs(&song);
    return 0;
}
