#include <stdio.h>
#include <stdlib.h>

#define MAX_MEMBERS 7
#define MAX_NICK_LEN 20
#define MAX_NAME_LEN 20
#define MAX_QUESTIONS 7
#define MAX_EMOTION_LEN 41
#define MIN_EMOTION_LEN 20
#define MAX_SKIP 3
#define INPUT_TRIES 2

typedef struct {
    char name[MAX_NAME_LEN];
    char nickname[MAX_NICK_LEN];
} Member;

typedef struct {
    int qid;
    char question[81];
} Question;

typedef struct {
    char nickname[MAX_NICK_LEN];
    char answers[MAX_QUESTIONS][MAX_EMOTION_LEN];
} EmotionDiary;

const Member members[MAX_MEMBERS] = {
    {"김영진", "YoungJin"},
    {"이지훈", "JiHoon"},
    {"박찬호", "ChanHo"},
    {"최수민", "SooMin"},
    {"이민재", "MinJae"},
    {"강현우", "HyunWoo"},
    {"송재현", "JaeHyun"}
};

const Question questions[MAX_QUESTIONS] = {
    {1, "최근에 어떤 일이 있었나요? 그 일에 대한 감정을 어떻게 느꼈나요?"},
    {2, "지난 몇 일 동안 기분은 어땠나요?"},
    {3, "현재 기분이 어떤가요? 기쁨, 슬픔, 분노, 불안 등 어떤 감정을 느끼고 있나요?"},
    {4, "어떤 상황에서 감정을 더 강하게 느끼나요?"},
    {5, "감정적인 변화나 스트레스 요인이 최근에 있었나요?"},
    {6, "감정을 표현하는 물리적인 증상이 있나요? (예: 눈물, 웃음, 심장이 빠르게 뛰는 소리 등)"},
    {7, "감정을 다루는 방식에 대해 어떤 생각이나 전략이 있나요?"}
};

EmotionDiary diaries[MAX_MEMBERS];

int strLen(const char *s) {
    int len=0;
    while(*s++) len++;
    return len;
}

void strCopy(char *dst, const char *src) {
    while((*dst++ = *src++));
}

int strCmp(const char *a, const char *b) {
    while(*a && *b) {
        if(*a != *b) return (*a - *b);
        a++; b++;
    }
    return (*a - *b);
}

int findMemberByNickname(const char *nick) {
    int i;
    for(i=0; i<MAX_MEMBERS; i++) {
        if(strCmp(nick, members[i].nickname) == 0) return i;
    }
    return -1;
}

void clearStdin() {
    int c;
    while((c = getchar()) != '\n' && c != EOF) {}
}

int inputLine(char *buf, int maxLen) {
    if(fgets(buf, maxLen, stdin) == NULL) return 0;
    int i = 0;
    while(buf[i] && buf[i] != '\n') i++;
    buf[i] = 0;
    return 1;
}

void showNickHint() {
    int i;
    for(i=0; i<MAX_MEMBERS; i++) {
        char first = members[i].nickname[0];
        int len = strLen(members[i].nickname);
        char last = members[i].nickname[len-1];
        printf("%c...%c\n", first, last);
    }
}

void inputNickName(char *nick) {
    int tries = 0;
    while(tries < INPUT_TRIES) {
        showNickHint();
        printf("정확한 닉네임을 입력하세요: ");
        if(!inputLine(nick, MAX_NICK_LEN)) {
            tries++;
            printf("입력 오류. 다시 시도하세요.\n");
            continue;
        }
        if(findMemberByNickname(nick) >= 0) return;
        tries++;
        printf("존재하지 않는 닉네임입니다. 다시 입력하세요.\n");
    }
    printf("닉네임 입력 2회 실패. 프로그램 종료.\n");
    exit(0);
}

void writeEmotionDiary(int idx) {
    int skips = 0;
    int i;
    for(i=0; i<MAX_QUESTIONS; i++) {
        if(skips == MAX_SKIP) {
            while(i < MAX_QUESTIONS) {
                strCopy(diaries[idx].answers[i], "TBD");
                i++;
            }
            break;
        }
        printf("Q%d) %s\n", questions[i].qid, questions[i].question);
        printf("(20~40자 이내, 최대 3개 질문 건너뛰기 가능. 건너뛰려면 빈 줄 입력)\n");
        char buf[MAX_EMOTION_LEN];
        if(!inputLine(buf, MAX_EMOTION_LEN)) {
            printf("입력 오류. TBD로 저장합니다.\n");
            strCopy(diaries[idx].answers[i], "TBD");
            skips++;
            continue;
        }
        int len = strLen(buf);
        if(len == 0) {
            skips++;
            strCopy(diaries[idx].answers[i], "TBD");
            continue;
        }
        if(len < MIN_EMOTION_LEN || len > MAX_EMOTION_LEN-1) {
            printf("입력 길이가 조건에 맞지 않습니다. 다시 입력하세요.\n");
            i--;
            continue;
        }
        strCopy(diaries[idx].answers[i], buf);
    }
}

void printEmotionDiary(int idx) {
    printf("==== %s 님의 감정 일기 ====\n", members[idx].name);
    int i;
    int tbdCount = 0;
    for(i=0; i<MAX_QUESTIONS; i++) {
        if(strCmp(diaries[idx].answers[i], "TBD") == 0) {
            tbdCount++;
            continue;
        }
        printf("Q%d) %s\n", questions[i].qid, questions[i].question);
        printf("답변: %s\n", diaries[idx].answers[i]);
    }
    if(tbdCount > 0) {
        printf("\nTBD로 남은 질문이 %d개 있습니다.\n", tbdCount);
    }
    printf("===========================\n");
}

void reviseTBD(int idx) {
    int changed = 0;
    int i;
    for(i=0; i<MAX_QUESTIONS; i++) {
        if(strCmp(diaries[idx].answers[i], "TBD") == 0) {
            printf("Q%d) %s\n", questions[i].qid, questions[i].question);
            printf("이 질문에 대한 답변을 다시 입력하세요 (20~40자):\n");
            char buf[MAX_EMOTION_LEN];
            if(!inputLine(buf, MAX_EMOTION_LEN)) {
                printf("입력 오류, 계속합니다.\n");
                continue;
            }
            int len = strLen(buf);
            if(len < MIN_EMOTION_LEN || len > MAX_EMOTION_LEN-1) {
                printf("길이 조건 불만족. 다음에 시도하세요.\n");
                continue;
            }
            strCopy(diaries[idx].answers[i], buf);
            changed++;
        }
    }
    if(changed > 0) {
        printf("수정이 완료되었습니다.\n");
        printEmotionDiary(idx);
    } else {
        printf("수정할 TBD 항목이 없습니다.\n");
    }
}

void logEmotionDiary() {
    char nick[MAX_NICK_LEN];
    inputNickName(nick);
    int idx = findMemberByNickname(nick);

    while(1) {
        printf("\n[%s 님] 감정 일기 메뉴:\n", members[idx].name);
        printf("1. 감정 일기 작성\n");
        printf("2. 감정 일기 출력\n");
        printf("3. TBD 질문 재입력\n");
        printf("4. 상위 메뉴로 돌아가기\n");
        printf("선택: ");
        int sel;
        if(scanf("%d%*c", &sel) != 1) {
            clearStdin();
            printf("잘못된 입력입니다.\n");
            continue;
        }
        if(sel == 1) {
            writeEmotionDiary(idx);
        } else if(sel == 2) {
            printEmotionDiary(idx);
        } else if(sel == 3) {
            reviseTBD(idx);
        } else if(sel == 4) {
            break;
        } else {
            printf("잘못된 선택입니다.\n");
        }
    }
}

int main() {
    logEmotionDiary();
    return 0;
}
