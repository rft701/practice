#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_ACCESSORY_NAME_LEN 64
#define MAX_ACCESSORY_USAGE_LEN 128
#define MAX_ACCESSORY_COUNT 100
#define CIRCULAR_QUEUE_CAPACITY 10

typedef struct {
    char name[MAX_ACCESSORY_NAME_LEN];
    char usage[MAX_ACCESSORY_USAGE_LEN];
} Accessory;

typedef struct {
    Accessory **data;
    int front;
    int rear;
    int capacity;
} CircularQueue;

void initCircularQueue(CircularQueue *cq, int capacity) {
    cq->data = (Accessory **)malloc(sizeof(Accessory *) * capacity);
    cq->front = 0;
    cq->rear = 0;
    cq->capacity = capacity;
}

int isCircularQueueEmpty(CircularQueue *cq) {
    return cq->front == cq->rear;
}

int isCircularQueueFull(CircularQueue *cq) {
    return ((cq->rear + 1) % cq->capacity) == cq->front;
}

int enqueueCircularQueue(CircularQueue *cq, Accessory *item) {
    if (isCircularQueueFull(cq)) return 0;
    cq->data[cq->rear] = item;
    cq->rear = (cq->rear + 1) % cq->capacity;
    return 1;
}

Accessory *dequeueCircularQueue(CircularQueue *cq) {
    if (isCircularQueueEmpty(cq)) return NULL;
    Accessory *item = cq->data[cq->front];
    cq->front = (cq->front + 1) % cq->capacity;
    return item;
}

void freeCircularQueue(CircularQueue *cq) {
    free(cq->data);
    cq->data = NULL;
    cq->front = 0;
    cq->rear = 0;
    cq->capacity = 0;
}

int loadAccessories(const char *filename, Accessory **accessories, int *count) {
    FILE *fp = fopen(filename, "r");
    if (!fp) return 0;
    char line[256];
    *count = 0;
    Accessory *accs = malloc(sizeof(Accessory) * MAX_ACCESSORY_COUNT);
    while (fgets(line, sizeof(line), fp)) {
        char name[MAX_ACCESSORY_NAME_LEN];
        char usage[MAX_ACCESSORY_USAGE_LEN];
        if (sscanf(line, "%[^,],%[^\n]", name, usage) != 2) continue;
        strncpy(accs[*count].name, name, MAX_ACCESSORY_NAME_LEN - 1);
        accs[*count].name[MAX_ACCESSORY_NAME_LEN - 1] = '\0';
        strncpy(accs[*count].usage, usage, MAX_ACCESSORY_USAGE_LEN - 1);
        accs[*count].usage[MAX_ACCESSORY_USAGE_LEN - 1] = '\0';
        (*count)++;
        if (*count >= MAX_ACCESSORY_COUNT) break;
    }
    fclose(fp);
    *accessories = accs;
    return 1;
}

void printAccessoriesList(Accessory *list, int count) {
    int i;
    for (i = 0; i < count; i++) {
        printf("%d. %s - %s\n", i + 1, list[i].name, list[i].usage);
    }
}

void printCircularQueue(CircularQueue *cq) {
    if (isCircularQueueEmpty(cq)) {
        printf("원형 큐가 비어있습니다.\n");
        return;
    }
    int idx = cq->front;
    int i = 1;
    while (idx != cq->rear) {
        Accessory *a = cq->data[idx];
        printf("%d. %s - %s\n", i, a->name, a->usage);
        idx = (idx + 1) % cq->capacity;
        i++;
    }
}

void applyAccessory() {
    Accessory *allAccessories = NULL;
    int totalAccessories = 0;
    if (!loadAccessories("accessory.txt", &allAccessories, &totalAccessories)) {
        printf("액세서리 파일을 읽는 데 실패했습니다.\n");
        return;
    }
    if (totalAccessories < 4) {
        printf("액세서리 항목이 부족합니다.\n");
        free(allAccessories);
        return;
    }
    printf("사용 가능한 액세서리 목록:\n");
    printAccessoriesList(allAccessories, totalAccessories);
    printf("선택할 액세서리 개수 (4~6): ");
    int numSelect = 0;
    scanf("%d", &numSelect);
    if (numSelect < 4) numSelect = 4;
    if (numSelect > 6) numSelect = 6;
    CircularQueue cq;
    initCircularQueue(&cq, CIRCULAR_QUEUE_CAPACITY);
    srand((unsigned int)time(NULL));
    int selectedIndices[6] = {0};
    int countSelected = 0;
    while (countSelected < numSelect) {
        int r = rand() % totalAccessories;
        int duplicate = 0;
        for (int i = 0; i < countSelected; i++) {
            if (selectedIndices[i] == r) {
                duplicate = 1;
                break;
            }
        }
        if (duplicate) continue;
        selectedIndices[countSelected++] = r;
        if (!enqueueCircularQueue(&cq, &allAccessories[r])) {
            printf("원형 큐가 가득 찼습니다.\n");
            break;
        }
    }
    if (isCircularQueueEmpty(&cq)) {
        printf("원형 큐에 선택된 액세서리가 없습니다.\n");
        free(allAccessories);
        freeCircularQueue(&cq);
        return;
    }
    printf("\n선택된 액세서리 (원형 큐):\n");
    printCircularQueue(&cq);
    if (isCircularQueueEmpty(&cq))
        printf("원형 큐가 비어있습니다.\n");
    else if (isCircularQueueFull(&cq))
        printf("원형 큐가 가득 찼습니다.\n");
    free(allAccessories);
    freeCircularQueue(&cq);
}
