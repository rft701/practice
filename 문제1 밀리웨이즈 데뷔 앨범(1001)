// debut.h
#ifndef DEBUT_H
#define DEBUT_H
#define MAX_TITLE_LEN 50
#define MAX_DESC_LEN 200
#define MAX_COMPOSERS 3
#define MAX_SONGS_PER_COMPOSER 20
typedef struct Song {
    char title[MAX_TITLE_LEN];
    char description[MAX_DESC_LEN];
    int priority;
    struct Song* next;
} Song;
typedef struct Composer {
    char name[30];
    Song* songs;
    Song* selected;
    int songCount;
} Composer;
extern Composer composers[MAX_COMPOSERS];
void makeDebutAlbum(void);
#endif

// debut.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "debut.h"
Composer composers[MAX_COMPOSERS] = {
    {"Alice", NULL, NULL, 0},
    {"Bob", NULL, NULL, 0},
    {"Charlie", NULL, NULL, 0}
};
Song* createSong(const char* title, const char* desc) {
    Song* s = (Song*)malloc(sizeof(Song));
    if (!s) { perror("malloc"); exit(EXIT_FAILURE);}
    strncpy(s->title, title, MAX_TITLE_LEN);
    strncpy(s->description, desc, MAX_DESC_LEN);
    s->priority = 0;
    s->next = NULL;
    return s;
}
void appendSong(Song** head, Song* newSong) {
    if (*head == NULL) {*head = newSong;}
    else {
        Song* cur = *head;
        while (cur->next) cur = cur->next;
        cur->next = newSong;
    }
}
void loadSongsFromFile(const char* filename) {
    FILE* fp = fopen(filename, "r");
    if (!fp) { perror("파일 열기 실패"); exit(EXIT_FAILURE);}
    char line[512];
    while (fgets(line, sizeof(line), fp)) {
        char compName[30], title[MAX_TITLE_LEN], desc[MAX_DESC_LEN];
        if (sscanf(line, "%29[^|]|%49[^|]|%199[^\n]", compName, title, desc) == 3) {
            int i, found = 0;
            for (i = 0; i < MAX_COMPOSERS; i++) {
                if (strcmp(composers[i].name, compName) == 0) {
                    Song* song = createSong(title, desc);
                    appendSong(&composers[i].songs, song);
                    composers[i].songCount++;
                    found = 1;
                    break;
                }
            }
            if (!found) fprintf(stderr, "알 수 없는 작곡가: %s\n", compName);
        }
    }
    fclose(fp);
}
void printComposerSongs(int idx) {
    printf("작곡가 %s 곡 목록:\n", composers[idx].name);
    Song* cur = composers[idx].songs;
    int num = 1;
    while (cur) {
        printf("  %d. %s - %s\n", num, cur->title, cur->description);
        cur = cur->next;
        num++;
    }
}
void selectSongsManual() {
    int totalSelections = 0;
    int lastComposer = -1;
    int lastCount = 0;
    while (totalSelections < 9) {
        printf("\n곡 선택 (남은 %d곡)\n", 9 - totalSelections);
        for (int i = 0; i < MAX_COMPOSERS; i++) printComposerSongs(i);
        int compChoice, songChoice;
        printf("작곡가 번호 선택 (1: Alice, 2: Bob, 3: Charlie): ");
        scanf("%d", &compChoice);
        compChoice -= 1;
        if (compChoice < 0 || compChoice >= MAX_COMPOSERS) {
            printf("잘못된 작곡가 번호입니다.\n");
            continue;
        }
        if (compChoice == lastComposer && lastCount == 2) {
            printf("같은 작곡가를 연속 2번만 선택할 수 있습니다.\n");
            continue;
        }
        int maxSongs = composers[compChoice].songCount;
        if (maxSongs == 0) {
            printf("이 작곡가는 곡이 없습니다.\n");
            continue;
        }
        printf("곡 번호 선택 (1~%d): ", maxSongs);
        scanf("%d", &songChoice);
        if (songChoice < 1 || songChoice > maxSongs) {
            printf("잘못된 곡 번호입니다.\n");
            continue;
        }
        Song* cur = composers[compChoice].songs;
        for (int i = 1; i < songChoice; i++) cur = cur->next;
        Song* s = composers[compChoice].selected;
        int alreadySelected = 0;
        while (s) {
            if (strcmp(s->title, cur->title) == 0) {alreadySelected = 1; break;}
            s = s->next;
        }
        if (alreadySelected) {
            printf("이미 선택된 곡입니다.\n");
            continue;
        }
        Song* selectedSong = createSong(cur->title, cur->description);
        appendSong(&composers[compChoice].selected, selectedSong);
        if (compChoice == lastComposer) lastCount++;
        else {lastComposer = compChoice; lastCount = 1;}
        totalSelections++;
    }
}
void selectSongsRandom() {
    int picks[MAX_COMPOSERS] = {3, 3, 3};
    char input[50];
    printf("작곡가별 곡 선택 개수 쉼표로 입력 (예: 3,2,4), 기본(3,3,3): ");
    fgets(input, sizeof(input), stdin);
    if (sscanf(input, "%d,%d,%d", &picks[0], &picks[1], &picks[2]) == 3) {
        for (int i = 0; i < MAX_COMPOSERS; i++) {
            if (picks[i] > composers[i].songCount) picks[i] = composers[i].songCount;
            if (picks[i] < 0) picks[i] = 0;
        }
    }
    srand((unsigned)time(NULL));
    for (int i = 0; i < MAX_COMPOSERS; i++) {
        if (composers[i].songCount == 0) continue;
        Song* arr[MAX_SONGS_PER_COMPOSER];
        int n = 0;
        Song* cur = composers[i].songs;
        while (cur) {
            arr[n++] = cur;
            cur = cur->next;
        }
        for (int j = n - 1; j > 0; j--) {
            int r = rand() % (j + 1);
            Song* tmp = arr[j]; arr[j] = arr[r]; arr[r] = tmp;
        }
        for (int k = 0; k < picks[i]; k++) {
            Song* selectedSong = createSong(arr[k]->title, arr[k]->description);
            appendSong(&composers[i].selected, selectedSong);
        }
    }
}
Song* mergeSortedLists(Song* a, Song* b) {
    if (!a) return b;
    if (!b) return a;
    Song* result = NULL;
    if (a->priority < b->priority) {
        result = a; result->next = mergeSortedLists(a->next, b);
    } else {
        result = b; result->next = mergeSortedLists(a, b->next);
    }
    return result;
}
Song* mergeAllSelected() {
    int priority = 1;
    for (int i = 0; i < MAX_COMPOSERS; i++) {
        Song* cur = composers[i].selected;
        while (cur) {
            cur->priority = priority++;
            cur = cur->next;
        }
    }
    Song* merged = NULL;
    merged = mergeSortedLists(composers[0].selected, composers[1].selected);
    merged = mergeSortedLists(merged, composers[2].selected);
    return merged;
}
void printDebutAlbum(Song* album) {
    printf("\n=== 데뷔 앨범 곡 목록 ===\n");
    int num = 1;
    Song* cur = album;
    while (cur) {
        printf("%d. %s\n   설명: %s\n", num++, cur->title, cur->description);
        cur = cur->next;
    }
}
void makeDebutAlbum() {
    loadSongsFromFile("music.txt");
    printf("곡 선택 방법을 고르세요:\n1) 직접 선택\n2) 무작위 선택 (보너스)\n선택: ");
    int method;
    scanf("%d", &method);
    while (getchar() != '\n');
    if (method == 1) selectSongsManual();
    else selectSongsRandom();
    Song* debutAlbum = mergeAllSelected();
    printDebutAlbum(debutAlbum);
}
