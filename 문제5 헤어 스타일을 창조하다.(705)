#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_HAIR_NAME_LEN 64
#define MAX_HAIR_DESC_LEN 128
#define MAX_HAIR_COUNT 100

typedef struct {
    char name[MAX_HAIR_NAME_LEN];
    char description[MAX_HAIR_DESC_LEN];
    char gender; // 'M' or 'F'
} HairStyle;

typedef struct {
    HairStyle *style;
    int outsiderScore;
    int selfScore;
    double fitScore;
} HairStyleEval;

int loadHairStyles(const char *filename, HairStyle **styles, int *count) {
    FILE *fp = fopen(filename, "r");
    if (!fp) return 0;
    char line[256];
    int idx = 0;
    HairStyle *arr = malloc(sizeof(HairStyle) * MAX_HAIR_COUNT);
    while (fgets(line, sizeof(line), fp)) {
        char name[MAX_HAIR_NAME_LEN], desc[MAX_HAIR_DESC_LEN], gender;
        if (sscanf(line, "%[^,],%[^,], %c", name, desc, &gender) != 3) continue;
        strncpy(arr[idx].name, name, MAX_HAIR_NAME_LEN-1);
        arr[idx].name[MAX_HAIR_NAME_LEN-1] = '\0';
        strncpy(arr[idx].description, desc, MAX_HAIR_DESC_LEN-1);
        arr[idx].description[MAX_HAIR_DESC_LEN-1] = '\0';
        arr[idx].gender = gender;
        idx++;
        if (idx >= MAX_HAIR_COUNT) break;
    }
    fclose(fp);
    *styles = arr;
    *count = idx;
    return 1;
}

int getNumToSelect() {
    int n;
    printf("선택할 헤어스타일 개수 (5~10): ");
    scanf("%d", &n);
    if (n < 5) n = 5;
    else if (n > 10) n = 10;
    return n;
}

void calcFitScores(HairStyleEval *evals, int n) {
    for (int i = 0; i < n; i++) {
        evals[i].outsiderScore = rand() % 51 + 50; // 50~100
        evals[i].selfScore = rand() % 51 + 50;
        evals[i].fitScore = evals[i].outsiderScore * 0.7 + evals[i].selfScore * 0.3;
    }
}

void printEvaluations(HairStyleEval *evals, int n) {
    printf("헤어 스타일 평가 결과:\n");
    for (int i = 0; i < n; i++) {
        printf("%2d. %-20s 타인점수:%3d 자기점수:%3d 적합도:%.2f\n",
               i+1, evals[i].style->name, evals[i].outsiderScore, evals[i].selfScore, evals[i].fitScore);
    }
}

void swap(HairStyleEval *a, HairStyleEval *b) {
    HairStyleEval tmp = *a;
    *a = *b;
    *b = tmp;
}

void bubbleSort(HairStyleEval *arr, int n) {
    for (int i = 0; i < n-1; i++)
        for (int j = 0; j < n-1-i; j++)
            if (arr[j].fitScore > arr[j+1].fitScore)
                swap(&arr[j], &arr[j+1]);
}

int partition(HairStyleEval *arr, int low, int high) {
    double pivot = arr[high].fitScore;
    int i = low -1;
    for (int j = low; j < high; j++) {
        if (arr[j].fitScore <= pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i+1], &arr[high]);
    return i+1;
}

void quickSort(HairStyleEval *arr, int low, int high) {
    if (low < high) {
        int p = partition(arr, low, high);
        quickSort(arr, low, p-1);
        quickSort(arr, p+1, high);
    }
}

void insertionSort(HairStyleEval *arr, int n) {
    for (int i = 1; i < n; i++) {
        HairStyleEval key = arr[i];
        int j = i-1;
        while (j >= 0 && arr[j].fitScore > key.fitScore) {
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = key;
    }
}

void testHairStyles() {
    HairStyle *allStyles = NULL;
    int totalStyles = 0;
    if (!loadHairStyles("hair_style.txt", &allStyles, &totalStyles)) {
        printf("헤어 스타일 파일을 읽는데 실패했습니다.\n");
        return;
    }
    printf("성별 입력 (M/F): ");
    char gender;
    scanf(" %c", &gender);
    if (gender != 'M' && gender != 'F') {
        printf("잘못된 성별 입력입니다.\n");
        free(allStyles);
        return;
    }
    HairStyle filtered[MAX_HAIR_COUNT];
    int filteredCount = 0;
    for (int i = 0; i < totalStyles; i++) {
        if (allStyles[i].gender == gender) {
            filtered[filteredCount++] = allStyles[i];
        }
    }
    if (filteredCount < 5) {
        printf("해당 성별에 적합한 헤어 스타일이 부족합니다.\n");
        free(allStyles);
        return;
    }
    int numSelect = getNumToSelect();
    if (numSelect > filteredCount) numSelect = filteredCount;

    HairStyleEval *evals = malloc(sizeof(HairStyleEval) * numSelect);
    srand((unsigned int)time(NULL));
    for (int i = 0; i < numSelect; i++) {
        int r;
        int dup;
        do {
            dup = 0;
            r = rand() % filteredCount;
            for (int j = 0; j < i; j++) {
                if (evals[j].style == &filtered[r]) dup = 1;
            }
        } while (dup);
        evals[i].style = &filtered[r];
    }
    calcFitScores(evals, numSelect);
    printf("\n정렬 방식 선택 (1:버블, 2:퀵, 3:삽입): ");
    int sortChoice;
    scanf("%d", &sortChoice);
    if (sortChoice == 1) bubbleSort(evals, numSelect);
    else if (sortChoice == 2) quickSort(evals, 0, numSelect-1);
    else if (sortChoice == 3) insertionSort(evals, numSelect);
    else printf("잘못된 선택, 정렬하지 않고 출력합니다.\n");
    printEvaluations(evals, numSelect);
    free(evals);
    free(allStyles);
}
