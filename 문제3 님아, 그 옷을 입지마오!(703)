#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_FASHION_REASON_LEN 256
#define MAX_NAME_LEN 64
#define MAX_NICKNAME_LEN 32
#define MAX_FASHION_COUNT 100
#define DEQUE_CAPACITY 10

typedef enum { MALE, FEMALE } Gender;

typedef struct {
    char style[MAX_NAME_LEN];
    char reason[MAX_FASHION_REASON_LEN];
} FashionStyle;

typedef struct {
    char firstName[MAX_NAME_LEN];
    char lastName[MAX_NAME_LEN];
    char nickname[MAX_NICKNAME_LEN];
    Gender gender;
} Member;

typedef struct {
    FashionStyle *data[DEQUE_CAPACITY];
    int front;
    int rear;
    int size;
} Deque;

void initDeque(Deque *dq) {
    dq->front = 0;
    dq->rear = 0;
    dq->size = 0;
}

int isDequeFull(Deque *dq) {
    return dq->size == DEQUE_CAPACITY;
}

int isDequeEmpty(Deque *dq) {
    return dq->size == 0;
}

int pushFront(Deque *dq, FashionStyle *fs) {
    if (isDequeFull(dq)) return 0;
    dq->front = (dq->front - 1 + DEQUE_CAPACITY) % DEQUE_CAPACITY;
    dq->data[dq->front] = fs;
    dq->size++;
    return 1;
}

int pushBack(Deque *dq, FashionStyle *fs) {
    if (isDequeFull(dq)) return 0;
    dq->data[dq->rear] = fs;
    dq->rear = (dq->rear + 1) % DEQUE_CAPACITY;
    dq->size++;
    return 1;
}

FashionStyle *popFront(Deque *dq) {
    if (isDequeEmpty(dq)) return NULL;
    FashionStyle *fs = dq->data[dq->front];
    dq->front = (dq->front + 1) % DEQUE_CAPACITY;
    dq->size--;
    return fs;
}

FashionStyle *popBack(Deque *dq) {
    if (isDequeEmpty(dq)) return NULL;
    dq->rear = (dq->rear - 1 + DEQUE_CAPACITY) % DEQUE_CAPACITY;
    FashionStyle *fs = dq->data[dq->rear];
    dq->size--;
    return fs;
}

int loadFashionStyles(const char *filename, FashionStyle **maleStyles, int *maleCount, FashionStyle **femaleStyles, int *femaleCount) {
    FILE *fp = fopen(filename, "r");
    if (!fp) return 0;
    char line[512];
    *maleCount = 0;
    *femaleCount = 0;
    FashionStyle *mStyles = malloc(sizeof(FashionStyle) * MAX_FASHION_COUNT);
    FashionStyle *fStyles = malloc(sizeof(FashionStyle) * MAX_FASHION_COUNT);
    while (fgets(line, sizeof(line), fp)) {
        char gender;
        char style[MAX_NAME_LEN];
        char reason[MAX_FASHION_REASON_LEN];
        if (sscanf(line, "%c,%[^,],%[^\n]", &gender, style, reason) != 3) continue;
        if (gender == 'M' && *maleCount < MAX_FASHION_COUNT) {
            strcpy(mStyles[*maleCount].style, style);
            strcpy(mStyles[*maleCount].reason, reason);
            (*maleCount)++;
        } else if (gender == 'F' && *femaleCount < MAX_FASHION_COUNT) {
            strcpy(fStyles[*femaleCount].style, style);
            strcpy(fStyles[*femaleCount].reason, reason);
            (*femaleCount)++;
        }
    }
    fclose(fp);
    *maleStyles = mStyles;
    *femaleStyles = fStyles;
    return 1;
}

int loadMembers(const char *filename, Member **members, int *count) {
    FILE *fp = fopen(filename, "r");
    if (!fp) return 0;
    char line[256];
    *count = 0;
    Member *mems = malloc(sizeof(Member) * MAX_FASHION_COUNT);
    fgets(line, sizeof(line), fp);
    while (fgets(line, sizeof(line), fp)) {
        char genderChar;
        if (sscanf(line, "%[^,],%[^,],%[^,],%c", mems[*count].firstName, mems[*count].lastName,
                   mems[*count].nickname, &genderChar) != 4) continue;
        if (genderChar == 'M')
            mems[*count].gender = MALE;
        else if (genderChar == 'F')
            mems[*count].gender = FEMALE;
        else continue;
        (*count)++;
        if (*count >= MAX_FASHION_COUNT) break;
    }
    fclose(fp);
    *members = mems;
    return 1;
}

void printDeque(Deque *dq) {
    if (isDequeEmpty(dq)) {
        printf("덱이 비어있습니다.\n");
        return;
    }
    int idx = dq->front;
    for (int i = 0; i < dq->size; i++) {
        FashionStyle *fs = dq->data[idx];
        printf("%d. %s - %s\n", i + 1, fs->style, fs->reason);
        idx = (idx + 1) % DEQUE_CAPACITY;
    }
}

void understandFashion() {
    FashionStyle *maleStyles = NULL, *femaleStyles = NULL;
    int maleCount = 0, femaleCount = 0;
    Member *members = NULL;
    int memberCount = 0;
    if (!loadFashionStyles("fashion.txt", &maleStyles, &maleCount, &femaleStyles, &femaleCount)) {
        printf("패션 스타일 파일을 읽는 데 실패했습니다.\n");
        return;
    }
    if (!loadMembers("milliways_member.csv", &members, &memberCount)) {
        printf("멤버 파일을 읽는 데 실패했습니다.\n");
        free(maleStyles);
        free(femaleStyles);
        return;
    }
    char inputNickname[MAX_NICKNAME_LEN];
    printf("닉네임을 입력하세요: ");
    scanf("%s", inputNickname);
    int foundIdx = -1;
    for (int i = 0; i < memberCount; i++) {
        if (strcmp(members[i].nickname, inputNickname) == 0) {
            foundIdx = i;
            break;
        }
    }
    if (foundIdx == -1) {
        printf("존재하지 않는 닉네임입니다.\n");
        free(maleStyles);
        free(femaleStyles);
        free(members);
        return;
    }
    Gender userGender = members[foundIdx].gender;
    FashionStyle *styleList = (userGender == MALE) ? maleStyles : femaleStyles;
    int styleCount = (userGender == MALE) ? maleCount : femaleCount;
    Deque deque;
    initDeque(&deque);
    srand((unsigned int)time(NULL));
    int randomIndex = rand() % styleCount;
    FashionStyle *selectedStyle = &styleList[randomIndex];
    printf("랜덤 제시된 패션 스타일: %s (%s)\n", selectedStyle->style, selectedStyle->reason);
    char choice;
    printf("앞에 넣으려면 F, 뒤에 넣으려면 B를 입력하세요: ");
    scanf(" %c", &choice);
    if (choice == 'F' || choice == 'f') {
        if (!pushFront(&deque, selectedStyle)) {
            printf("덱이 가득 찼습니다.\n");
        }
    } else if (choice == 'B' || choice == 'b') {
        if (!pushBack(&deque, selectedStyle)) {
            printf("덱이 가득 찼습니다.\n");
        }
    } else {
        printf("잘못된 입력입니다.\n");
    }
    printDeque(&deque);
    free(maleStyles);
    free(femaleStyles);
    free(members);
}
